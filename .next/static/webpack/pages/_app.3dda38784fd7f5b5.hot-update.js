"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./lib/localDb.tsx":
/*!*************************!*\
  !*** ./lib/localDb.tsx ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LocalDbProvider: function() { return /* binding */ LocalDbProvider; },\n/* harmony export */   getCommentsByUser: function() { return /* binding */ getCommentsByUser; },\n/* harmony export */   serverAddComment: function() { return /* binding */ serverAddComment; },\n/* harmony export */   serverDb: function() { return /* binding */ serverDb; },\n/* harmony export */   serverGetCommentsByPlate: function() { return /* binding */ serverGetCommentsByPlate; },\n/* harmony export */   serverGetCommentsByUser: function() { return /* binding */ serverGetCommentsByUser; },\n/* harmony export */   updatePlateVote: function() { return /* binding */ updatePlateVote; },\n/* harmony export */   upvotedCommentsByUser: function() { return /* binding */ upvotedCommentsByUser; },\n/* harmony export */   useLocalDb: function() { return /* binding */ useLocalDb; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_firebaseConfig__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/firebaseConfig */ \"./lib/firebaseConfig.ts\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! firebase/firestore */ \"./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n// Create context\nconst LocalDbContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n// Provider component\nfunction LocalDbProvider(param) {\n    let { children } = param;\n    _s();\n    const [comments, setComments] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [upvotedCommentsByUser, setUpvotedCommentsByUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    // Fetch comments in real-time\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.collection)(_lib_firebaseConfig__WEBPACK_IMPORTED_MODULE_2__.db, \"comments\"));\n        const unsubscribe = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.onSnapshot)(q, (querySnapshot)=>{\n            const fetchedComments = [];\n            querySnapshot.forEach((doc)=>{\n                const data = doc.data();\n                fetchedComments.push({\n                    ...data,\n                    id: doc.id,\n                    createdAt: data.createdAt.toDate()\n                });\n            });\n            setComments(fetchedComments);\n        });\n        return ()=>unsubscribe();\n    }, []);\n    const addComment = async (comment)=>{\n        const newComment = {\n            ...comment,\n            createdAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.Timestamp.now(),\n            upvotes: 0,\n            upvotedBy: []\n        };\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.collection)(_lib_firebaseConfig__WEBPACK_IMPORTED_MODULE_2__.db, \"comments\"), newComment);\n    };\n    const updateComment = async (id, content)=>{\n        const commentRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.doc)(_lib_firebaseConfig__WEBPACK_IMPORTED_MODULE_2__.db, \"comments\", id);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.updateDoc)(commentRef, {\n            content\n        });\n    };\n    const deleteComment = async (id)=>{\n        const commentRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.doc)(_lib_firebaseConfig__WEBPACK_IMPORTED_MODULE_2__.db, \"comments\", id);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.deleteDoc)(commentRef);\n    };\n    const getCommentsByPlate = async (plateNumber)=>{\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.collection)(_lib_firebaseConfig__WEBPACK_IMPORTED_MODULE_2__.db, \"comments\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.where)(\"plateNumber\", \"==\", plateNumber));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.getDocs)(q);\n        const plateComments = [];\n        querySnapshot.forEach((doc)=>{\n            const data = doc.data();\n            plateComments.push({\n                ...data,\n                id: doc.id,\n                createdAt: data.createdAt.toDate()\n            });\n        });\n        return plateComments;\n    };\n    const upvoteComment = async (id, userId)=>{\n        const commentRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.doc)(_lib_firebaseConfig__WEBPACK_IMPORTED_MODULE_2__.db, \"comments\", id);\n        const commentSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.getDoc)(commentRef);\n        if (commentSnap.exists()) {\n            const commentData = commentSnap.data();\n            const isAlreadyUpvoted = commentData.upvotedBy.includes(userId);\n            // If the user has already upvoted, remove the upvote (toggle behavior)\n            const updatedUpvotes = isAlreadyUpvoted ? Math.max(0, commentData.upvotes - 1) : commentData.upvotes + 1;\n            const updatedUpvotedBy = isAlreadyUpvoted ? commentData.upvotedBy.filter((uid)=>uid !== userId) : [\n                ...commentData.upvotedBy,\n                userId\n            ];\n            // Update Firestore and make sure the upvote is logged\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.updateDoc)(commentRef, {\n                upvotes: updatedUpvotes,\n                upvotedBy: updatedUpvotedBy\n            });\n            // Update the local state for upvoted comments by user\n            setUpvotedCommentsByUser((prev)=>({\n                    ...prev,\n                    [userId]: isAlreadyUpvoted ? prev[userId].filter((commentId)=>commentId !== id) : [\n                        ...prev[userId] || [],\n                        id\n                    ]\n                }));\n        }\n    };\n    const downvoteComment = async (id, userId)=>{\n        const commentRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.doc)(_lib_firebaseConfig__WEBPACK_IMPORTED_MODULE_2__.db, \"comments\", id);\n        const commentSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.getDoc)(commentRef);\n        if (commentSnap.exists()) {\n            const commentData = commentSnap.data();\n            const isAlreadyUpvoted = commentData.upvotedBy.includes(userId);\n            // If the user has already upvoted, remove the upvote (toggle behavior)\n            const updatedUpvotes = isAlreadyUpvoted ? Math.max(0, commentData.upvotes - 1) : commentData.upvotes + 1;\n            const updatedUpvotedBy = isAlreadyUpvoted ? commentData.upvotedBy.filter((uid)=>uid !== userId) : [\n                ...commentData.upvotedBy,\n                userId\n            ];\n            // Update Firestore and make sure the downvote is logged\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.updateDoc)(commentRef, {\n                upvotes: updatedUpvotes,\n                upvotedBy: updatedUpvotedBy\n            });\n            // Update the local state for upvoted comments by user\n            setUpvotedCommentsByUser((prev)=>({\n                    ...prev,\n                    [userId]: updatedUpvotedBy\n                }));\n        }\n    };\n    const getCommentsByUser = async (userId)=>{\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.collection)(_lib_firebaseConfig__WEBPACK_IMPORTED_MODULE_2__.db, \"comments\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.where)(\"userId\", \"==\", userId));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.getDocs)(q);\n        const userComments = [];\n        querySnapshot.forEach((doc)=>{\n            const data = doc.data();\n            userComments.push({\n                ...data,\n                id: doc.id,\n                createdAt: data.createdAt.toDate()\n            });\n        });\n        return userComments;\n    };\n    const getPlateVote = async (plateNumber, userId)=>{\n        const plateVoteRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.doc)(_lib_firebaseConfig__WEBPACK_IMPORTED_MODULE_2__.db, \"plateVotes\", plateNumber);\n        const plateVoteSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.getDoc)(plateVoteRef);\n        if (plateVoteSnap.exists()) {\n            const data = plateVoteSnap.data();\n            const userVote = userId ? data.users[userId] || null : null;\n            return {\n                ...data,\n                userVote\n            };\n        } else {\n            return {\n                upvotes: 0,\n                downvotes: 0,\n                users: {}\n            };\n        }\n    };\n    const updatePlateVote = async (plateNumber, userId, type)=>{\n        const plateVoteRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.doc)(_lib_firebaseConfig__WEBPACK_IMPORTED_MODULE_2__.db, \"plateVotes\", plateNumber);\n        const plateVoteSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.getDoc)(plateVoteRef);\n        let currentVotes = {\n            upvotes: 0,\n            downvotes: 0,\n            users: {}\n        };\n        if (plateVoteSnap.exists()) {\n            currentVotes = plateVoteSnap.data();\n        }\n        const currentUserVote = currentVotes.users[userId];\n        if (currentUserVote === type) {\n            if (type === \"upvote\") currentVotes.upvotes = Math.max(0, currentVotes.upvotes - 1);\n            else currentVotes.downvotes = Math.max(0, currentVotes.downvotes - 1);\n            delete currentVotes.users[userId];\n        } else {\n            if (currentUserVote === \"upvote\") currentVotes.upvotes = Math.max(0, currentVotes.upvotes - 1);\n            if (currentUserVote === \"downvote\") currentVotes.downvotes = Math.max(0, currentVotes.downvotes - 1);\n            if (type === \"upvote\") currentVotes.upvotes += 1;\n            if (type === \"downvote\") currentVotes.downvotes += 1;\n            currentVotes.users[userId] = type;\n        }\n        const plateVoteUpdateData = {\n            upvotes: currentVotes.upvotes,\n            downvotes: currentVotes.downvotes,\n            users: {\n                ...currentVotes.users\n            }\n        };\n        if (!plateVoteSnap.exists()) {\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.setDoc)(plateVoteRef, plateVoteUpdateData);\n        } else {\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.updateDoc)(plateVoteRef, plateVoteUpdateData);\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(LocalDbContext.Provider, {\n        value: {\n            comments,\n            addComment,\n            updateComment,\n            deleteComment,\n            getCommentsByPlate,\n            upvoteComment,\n            downvoteComment,\n            getCommentsByUser,\n            upvotedCommentsByUser,\n            getPlateVote,\n            updatePlateVote\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/cory.wynn/Desktop/license-plate/lib/localDb.tsx\",\n        lineNumber: 241,\n        columnNumber: 5\n    }, this);\n}\n_s(LocalDbProvider, \"4RzbWXDPgxNSZ88lhTbG7OIa0VM=\");\n_c = LocalDbProvider;\n// Hook for using the LocalDb context\nfunction useLocalDb() {\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(LocalDbContext);\n    if (context === undefined) {\n        throw new Error(\"useLocalDb must be used within a LocalDbProvider\");\n    }\n    return context;\n}\n_s1(useLocalDb, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n// Server-side functions\nasync function serverGetCommentsByUser(userId) {\n    const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.collection)(_lib_firebaseConfig__WEBPACK_IMPORTED_MODULE_2__.db, \"comments\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.where)(\"userId\", \"==\", userId));\n    const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.getDocs)(q);\n    const userComments = [];\n    querySnapshot.forEach((doc)=>{\n        const data = doc.data();\n        userComments.push({\n            ...data,\n            id: doc.id,\n            createdAt: data.createdAt.toDate()\n        });\n    });\n    return userComments;\n}\nasync function serverGetCommentsByPlate(plateNumber) {\n    const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.collection)(_lib_firebaseConfig__WEBPACK_IMPORTED_MODULE_2__.db, \"comments\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.where)(\"plateNumber\", \"==\", plateNumber));\n    const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.getDocs)(q);\n    const plateComments = [];\n    querySnapshot.forEach((doc)=>{\n        const data = doc.data();\n        plateComments.push({\n            ...data,\n            id: doc.id,\n            createdAt: data.createdAt.toDate()\n        });\n    });\n    return plateComments;\n}\nasync function serverAddComment(comment) {\n    const newComment = {\n        ...comment,\n        createdAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.Timestamp.now(),\n        upvotes: 0,\n        upvotedBy: []\n    };\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.collection)(_lib_firebaseConfig__WEBPACK_IMPORTED_MODULE_2__.db, \"comments\"), newComment);\n}\n// Export all server-side functions\nconst serverDb = {\n    getCommentsByUser: serverGetCommentsByUser,\n    getCommentsByPlate: serverGetCommentsByPlate,\n    addComment: serverAddComment\n};\nconst getCommentsByUser = async (userId)=>{\n    const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.collection)(_lib_firebaseConfig__WEBPACK_IMPORTED_MODULE_2__.db, \"comments\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.where)(\"userId\", \"==\", userId));\n    const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.getDocs)(q);\n    const userComments = [];\n    querySnapshot.forEach((doc)=>{\n        userComments.push({\n            id: doc.id,\n            ...doc.data()\n        });\n    });\n    return userComments;\n};\n// Export these functions and variables for external use\nconst upvotedCommentsByUser = {};\nconst updatePlateVote = async (plateNumber, userId, type)=>{\n    const plateVoteRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.doc)(_lib_firebaseConfig__WEBPACK_IMPORTED_MODULE_2__.db, \"plateVotes\", plateNumber);\n    const plateVoteSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.getDoc)(plateVoteRef);\n    let currentVotes = {\n        upvotes: 0,\n        downvotes: 0,\n        users: {}\n    };\n    if (plateVoteSnap.exists()) {\n        currentVotes = plateVoteSnap.data();\n    }\n    const currentUserVote = currentVotes.users[userId];\n    if (currentUserVote === type) {\n        if (type === \"upvote\") currentVotes.upvotes = Math.max(0, currentVotes.upvotes - 1);\n        else currentVotes.downvotes = Math.max(0, currentVotes.downvotes - 1);\n        delete currentVotes.users[userId];\n    } else {\n        if (currentUserVote === \"upvote\") currentVotes.upvotes = Math.max(0, currentVotes.upvotes - 1);\n        if (currentUserVote === \"downvote\") currentVotes.downvotes = Math.max(0, currentVotes.downvotes - 1);\n        if (type === \"upvote\") currentVotes.upvotes += 1;\n        if (type === \"downvote\") currentVotes.downvotes += 1;\n        currentVotes.users[userId] = type;\n    }\n    const plateVoteUpdateData = {\n        upvotes: currentVotes.upvotes,\n        downvotes: currentVotes.downvotes,\n        users: {\n            ...currentVotes.users\n        }\n    };\n    if (!plateVoteSnap.exists()) {\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.setDoc)(plateVoteRef, plateVoteUpdateData);\n    } else {\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.updateDoc)(plateVoteRef, plateVoteUpdateData);\n    }\n};\nvar _c;\n$RefreshReg$(_c, \"LocalDbProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/localDb.tsx\n"));

/***/ })

});